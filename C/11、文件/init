setvbuf(stdin,NULL,_IONBF,0)    // 设置键盘输入无缓冲模式，即程序只有两个字节进行缓冲输入
char str[4096];
setvbuf(stdin,str,_IOFBF,4096)    // 设置键盘输入全缓冲模式

struct _iobuf {
    char *_ptr;         缓冲区的指针（当前地址）
    int   _cnt;         缓冲区的有效数据（未读的字符数）
    char *_base;        缓冲区的起始地址
    int   _flag;
    int   _file;        文件提示符
    int   _charbuf;     缓冲区保存的字符    用于双字节缓冲，前8位保留第一个字节的字符，次8位保留第二个
    int   _bufsiz;      缓冲区的大小
    char *_tmpfname;
    };
typedef struct _iobuf FILE;

printf("%d\n",*++stdin->_ptr)   // 取出当前缓冲区的值

fscanf (stdin, "%s", &str);
fprintf (f, "str=%s\n", &str);
fread (&ch, size, count, pf); // 读取下一个元素,成功返回个数         int类型
fwrite (buf, 1, 5, pfa); // 写入数组，传入数组首地址，元素大小为1,5个元素，以及文件指针,会返回成功的个数

fgets (&str, 4, stdin); // 最大读取3个字节到str,同时在末尾加一个\0字符，遇到回车结束;按行读取
fputs (&str, stdout);   并不会将回车符也写入  // 失败即返回文件结束标志EOF   -1
char ch = fgetc(fp);    // 失败即返回文件结束标志EOF   -1
fputc('f', fp);         // 失败即返回文件结束标志EOF   -1

putchar()
getchar()

int w = _getw (stdin);
_putw (97, stdout);


fflush (pfa);
_access ("e:\123.c", 模式)
perror("输出的错误是");//输出的错误是: Bad file descriptor
ferror (fp);    // 用来检测各种输入输出函数是否出现错误；错误为-1（EOF），正常为0
clearerr(fp);


int res = remove(&path);   // 删除文件,成功返回0，失败，-1

#include<io.h>

mktemp  新建一个唯一的目录




检测到输入时，会自动刷新输出缓冲区
printf("xxxxxxxxx");
while(1){};//默认不会进行输出



__fpurge(stdin);  刷新输入缓冲区stdio.h
feof(stdin)		  是否检测到结束符EOF；没到为0
检测到结束符，clearerr清空键盘缓冲区

rename(path1,path2)


